from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
import requests
import os
from dotenv import load_dotenv
from pydantic import BaseModel

load_dotenv()

app = FastAPI()

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.mount("/static", StaticFiles(directory="static"), name="static")

# Environment variables
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

class WeatherRequest(BaseModel):
    lat: float
    lon: float
    units: str = "metric"

class ChatRequest(BaseModel):
    message: str
    user_id: str


@app.get("/")
async def read_index():
    return FileResponse("static/index.html")

@app.get("/api/health")
async def health_check():
    return {"status": "healthy", "service": "Telegram Mini App Backend"}

@app.post("/api/weather")
async def get_weather(weather_req: WeatherRequest):
    """
    Get weather data from OpenWeatherMap API
    """
    try:
        url = f"https://api.openweathermap.org/data/3.0/onecall"
        params = {
            "lat": weather_req.lat,
            "lon": weather_req.lon,
            "appid": OPENWEATHER_API_KEY,
            "units": weather_req.units,
            "exclude": "minutely,hourly,alerts"
        }
        
        response = requests.get(url, params=params)
        response.raise_for_status()
        
        weather_data = response.json()
        
        # Format the response
        formatted_data = {
            "current": {
                "temp": weather_data["current"]["temp"],
                "feels_like": weather_data["current"]["feels_like"],
                "humidity": weather_data["current"]["humidity"],
                "pressure": weather_data["current"]["pressure"],
                "wind_speed": weather_data["current"]["wind_speed"],
                "weather": weather_data["current"]["weather"][0]["description"],
                "icon": weather_data["current"]["weather"][0]["icon"]
            },
            "daily": [
                {
                    "dt": day["dt"],
                    "temp": day["temp"]["day"],
                    "min": day["temp"]["min"],
                    "max": day["temp"]["max"],
                    "weather": day["weather"][0]["description"],
                    "icon": day["weather"][0]["icon"]
                }
                for day in weather_data["daily"][:5]
            ]
        }
        
        return formatted_data
    except requests.exceptions.RequestException as e:
        raise HTTPException(status_code=500, detail=f"Weather API error: {str(e)}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")

@app.post("/api/chat")
async def chat_with_bot(chat_req: ChatRequest):
    """
    Mock chat bot - –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, —Ç–æ–ª—å–∫–æ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç—ã
    """
    # –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    mock_responses = [
        "–ü—Ä–∏–≤–µ—Ç! –Ø –¥–µ–º–æ-–±–æ—Ç. –ù–∞—Å—Ç–æ—è—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.",
        "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —á–∞—Ç–∞. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã AI.",
        "–Ø –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—é, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞!",
        "–í—ã —Å–∫–∞–∑–∞–ª–∏: '{}'. –ù–æ —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å.".format(chat_req.message),
        "–≠—Ç–æ –¥–µ–º–æ-—Ä–µ–∂–∏–º. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º AI API –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã.",
        "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? (–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)"
    ]
    
    import random
    import time
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–∞
    time.sleep(1)
    
    return {"response": random.choice(mock_responses)}

@app.post("/api/telegram/webhook")
async def telegram_webhook(update: dict):
    """
    Webhook for Telegram bot
    """
    try:
        message = update.get("message", {})
        text = message.get("text", "")
        chat_id = message.get("chat", {}).get("id")
        
        if text and chat_id:
            telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
            payload = {
                "chat_id": chat_id,
                "text": f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {text}\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞!",
                "reply_markup": {
                    "inline_keyboard": [[
                        {
                            "text": "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                            "web_app": {"url": "https://your-vercel-app.vercel.app"}
                        }
                    ]]
                }
            }
            
            requests.post(telegram_url, json=payload)
        
        return {"status": "ok"}
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Telegram webhook error: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000)